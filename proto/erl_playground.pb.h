// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/erl_playground.proto

#ifndef PROTOBUF_INCLUDED_proto_2ferl_5fplayground_2eproto
#define PROTOBUF_INCLUDED_proto_2ferl_5fplayground_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2ferl_5fplayground_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2ferl_5fplayground_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_proto_2ferl_5fplayground_2eproto();
class create_session;
class create_sessionDefaultTypeInternal;
extern create_sessionDefaultTypeInternal _create_session_default_instance_;
class envelope;
class envelopeDefaultTypeInternal;
extern envelopeDefaultTypeInternal _envelope_default_instance_;
class req;
class reqDefaultTypeInternal;
extern reqDefaultTypeInternal _req_default_instance_;
class server_message;
class server_messageDefaultTypeInternal;
extern server_messageDefaultTypeInternal _server_message_default_instance_;
namespace google {
namespace protobuf {
template<> ::create_session* Arena::CreateMaybeMessage<::create_session>(Arena*);
template<> ::envelope* Arena::CreateMaybeMessage<::envelope>(Arena*);
template<> ::req* Arena::CreateMaybeMessage<::req>(Arena*);
template<> ::server_message* Arena::CreateMaybeMessage<::server_message>(Arena*);
}  // namespace protobuf
}  // namespace google

enum req_type_enum {
  req_type_enum_create_session = 1,
  req_type_enum_server_message = 2
};
bool req_type_enum_IsValid(int value);
const req_type_enum req_type_enum_type_enum_MIN = req_type_enum_create_session;
const req_type_enum req_type_enum_type_enum_MAX = req_type_enum_server_message;
const int req_type_enum_type_enum_ARRAYSIZE = req_type_enum_type_enum_MAX + 1;

const ::google::protobuf::EnumDescriptor* req_type_enum_descriptor();
inline const ::std::string& req_type_enum_Name(req_type_enum value) {
  return ::google::protobuf::internal::NameOfEnum(
    req_type_enum_descriptor(), value);
}
inline bool req_type_enum_Parse(
    const ::std::string& name, req_type_enum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<req_type_enum>(
    req_type_enum_descriptor(), name, value);
}
// ===================================================================

class create_session final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:create_session) */ {
 public:
  create_session();
  virtual ~create_session();

  create_session(const create_session& from);

  inline create_session& operator=(const create_session& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  create_session(create_session&& from) noexcept
    : create_session() {
    *this = ::std::move(from);
  }

  inline create_session& operator=(create_session&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const create_session& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const create_session* internal_default_instance() {
    return reinterpret_cast<const create_session*>(
               &_create_session_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(create_session* other);
  friend void swap(create_session& a, create_session& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline create_session* New() const final {
    return CreateMaybeMessage<create_session>(nullptr);
  }

  create_session* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<create_session>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const create_session& from);
  void MergeFrom(const create_session& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(create_session* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string username = 1;
  bool has_username() const;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // @@protoc_insertion_point(class_scope:create_session)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  friend struct ::TableStruct_proto_2ferl_5fplayground_2eproto;
};
// -------------------------------------------------------------------

class server_message final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server_message) */ {
 public:
  server_message();
  virtual ~server_message();

  server_message(const server_message& from);

  inline server_message& operator=(const server_message& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  server_message(server_message&& from) noexcept
    : server_message() {
    *this = ::std::move(from);
  }

  inline server_message& operator=(server_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const server_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const server_message* internal_default_instance() {
    return reinterpret_cast<const server_message*>(
               &_server_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(server_message* other);
  friend void swap(server_message& a, server_message& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline server_message* New() const final {
    return CreateMaybeMessage<server_message>(nullptr);
  }

  server_message* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<server_message>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const server_message& from);
  void MergeFrom(const server_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(server_message* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string message = 1;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:server_message)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  friend struct ::TableStruct_proto_2ferl_5fplayground_2eproto;
};
// -------------------------------------------------------------------

class req final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:req) */ {
 public:
  req();
  virtual ~req();

  req(const req& from);

  inline req& operator=(const req& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  req(req&& from) noexcept
    : req() {
    *this = ::std::move(from);
  }

  inline req& operator=(req&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const req& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const req* internal_default_instance() {
    return reinterpret_cast<const req*>(
               &_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(req* other);
  friend void swap(req& a, req& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline req* New() const final {
    return CreateMaybeMessage<req>(nullptr);
  }

  req* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<req>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const req& from);
  void MergeFrom(const req& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(req* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef req_type_enum type_enum;
  static const type_enum create_session =
    req_type_enum_create_session;
  static const type_enum server_message =
    req_type_enum_server_message;
  static inline bool type_enum_IsValid(int value) {
    return req_type_enum_IsValid(value);
  }
  static const type_enum type_enum_MIN =
    req_type_enum_type_enum_MIN;
  static const type_enum type_enum_MAX =
    req_type_enum_type_enum_MAX;
  static const int type_enum_ARRAYSIZE =
    req_type_enum_type_enum_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  type_enum_descriptor() {
    return req_type_enum_descriptor();
  }
  static inline const ::std::string& type_enum_Name(type_enum value) {
    return req_type_enum_Name(value);
  }
  static inline bool type_enum_Parse(const ::std::string& name,
      type_enum* value) {
    return req_type_enum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .create_session create_session_data = 2;
  bool has_create_session_data() const;
  void clear_create_session_data();
  static const int kCreateSessionDataFieldNumber = 2;
  const ::create_session& create_session_data() const;
  ::create_session* release_create_session_data();
  ::create_session* mutable_create_session_data();
  void set_allocated_create_session_data(::create_session* create_session_data);

  // optional .server_message server_message_data = 3;
  bool has_server_message_data() const;
  void clear_server_message_data();
  static const int kServerMessageDataFieldNumber = 3;
  const ::server_message& server_message_data() const;
  ::server_message* release_server_message_data();
  ::server_message* mutable_server_message_data();
  void set_allocated_server_message_data(::server_message* server_message_data);

  // required .req.type_enum type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::req_type_enum type() const;
  void set_type(::req_type_enum value);

  // @@protoc_insertion_point(class_scope:req)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::create_session* create_session_data_;
  ::server_message* server_message_data_;
  int type_;
  friend struct ::TableStruct_proto_2ferl_5fplayground_2eproto;
};
// -------------------------------------------------------------------

class envelope final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:envelope) */ {
 public:
  envelope();
  virtual ~envelope();

  envelope(const envelope& from);

  inline envelope& operator=(const envelope& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  envelope(envelope&& from) noexcept
    : envelope() {
    *this = ::std::move(from);
  }

  inline envelope& operator=(envelope&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const envelope& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const envelope* internal_default_instance() {
    return reinterpret_cast<const envelope*>(
               &_envelope_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(envelope* other);
  friend void swap(envelope& a, envelope& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline envelope* New() const final {
    return CreateMaybeMessage<envelope>(nullptr);
  }

  envelope* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<envelope>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const envelope& from);
  void MergeFrom(const envelope& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(envelope* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .req uncompressed_data = 2;
  bool has_uncompressed_data() const;
  void clear_uncompressed_data();
  static const int kUncompressedDataFieldNumber = 2;
  const ::req& uncompressed_data() const;
  ::req* release_uncompressed_data();
  ::req* mutable_uncompressed_data();
  void set_allocated_uncompressed_data(::req* uncompressed_data);

  // @@protoc_insertion_point(class_scope:envelope)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::req* uncompressed_data_;
  friend struct ::TableStruct_proto_2ferl_5fplayground_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// create_session

// required string username = 1;
inline bool create_session::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void create_session::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& create_session::username() const {
  // @@protoc_insertion_point(field_get:create_session.username)
  return username_.GetNoArena();
}
inline void create_session::set_username(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:create_session.username)
}
#if LANG_CXX11
inline void create_session::set_username(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:create_session.username)
}
#endif
inline void create_session::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:create_session.username)
}
inline void create_session::set_username(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:create_session.username)
}
inline ::std::string* create_session::mutable_username() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:create_session.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* create_session::release_username() {
  // @@protoc_insertion_point(field_release:create_session.username)
  if (!has_username()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return username_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void create_session::set_allocated_username(::std::string* username) {
  if (username != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:create_session.username)
}

// -------------------------------------------------------------------

// server_message

// required string message = 1;
inline bool server_message::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void server_message::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& server_message::message() const {
  // @@protoc_insertion_point(field_get:server_message.message)
  return message_.GetNoArena();
}
inline void server_message::set_message(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server_message.message)
}
#if LANG_CXX11
inline void server_message::set_message(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:server_message.message)
}
#endif
inline void server_message::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server_message.message)
}
inline void server_message::set_message(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server_message.message)
}
inline ::std::string* server_message::mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:server_message.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* server_message::release_message() {
  // @@protoc_insertion_point(field_release:server_message.message)
  if (!has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return message_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void server_message::set_allocated_message(::std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:server_message.message)
}

// -------------------------------------------------------------------

// req

// required .req.type_enum type = 1;
inline bool req::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void req::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::req_type_enum req::type() const {
  // @@protoc_insertion_point(field_get:req.type)
  return static_cast< ::req_type_enum >(type_);
}
inline void req::set_type(::req_type_enum value) {
  assert(::req_type_enum_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
  // @@protoc_insertion_point(field_set:req.type)
}

// optional .create_session create_session_data = 2;
inline bool req::has_create_session_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void req::clear_create_session_data() {
  if (create_session_data_ != nullptr) create_session_data_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::create_session& req::create_session_data() const {
  const ::create_session* p = create_session_data_;
  // @@protoc_insertion_point(field_get:req.create_session_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::create_session*>(
      &::_create_session_default_instance_);
}
inline ::create_session* req::release_create_session_data() {
  // @@protoc_insertion_point(field_release:req.create_session_data)
  _has_bits_[0] &= ~0x00000001u;
  ::create_session* temp = create_session_data_;
  create_session_data_ = nullptr;
  return temp;
}
inline ::create_session* req::mutable_create_session_data() {
  _has_bits_[0] |= 0x00000001u;
  if (create_session_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::create_session>(GetArenaNoVirtual());
    create_session_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:req.create_session_data)
  return create_session_data_;
}
inline void req::set_allocated_create_session_data(::create_session* create_session_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete create_session_data_;
  }
  if (create_session_data) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      create_session_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, create_session_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  create_session_data_ = create_session_data;
  // @@protoc_insertion_point(field_set_allocated:req.create_session_data)
}

// optional .server_message server_message_data = 3;
inline bool req::has_server_message_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void req::clear_server_message_data() {
  if (server_message_data_ != nullptr) server_message_data_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::server_message& req::server_message_data() const {
  const ::server_message* p = server_message_data_;
  // @@protoc_insertion_point(field_get:req.server_message_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::server_message*>(
      &::_server_message_default_instance_);
}
inline ::server_message* req::release_server_message_data() {
  // @@protoc_insertion_point(field_release:req.server_message_data)
  _has_bits_[0] &= ~0x00000002u;
  ::server_message* temp = server_message_data_;
  server_message_data_ = nullptr;
  return temp;
}
inline ::server_message* req::mutable_server_message_data() {
  _has_bits_[0] |= 0x00000002u;
  if (server_message_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::server_message>(GetArenaNoVirtual());
    server_message_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:req.server_message_data)
  return server_message_data_;
}
inline void req::set_allocated_server_message_data(::server_message* server_message_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete server_message_data_;
  }
  if (server_message_data) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      server_message_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, server_message_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  server_message_data_ = server_message_data;
  // @@protoc_insertion_point(field_set_allocated:req.server_message_data)
}

// -------------------------------------------------------------------

// envelope

// required .req uncompressed_data = 2;
inline bool envelope::has_uncompressed_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void envelope::clear_uncompressed_data() {
  if (uncompressed_data_ != nullptr) uncompressed_data_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::req& envelope::uncompressed_data() const {
  const ::req* p = uncompressed_data_;
  // @@protoc_insertion_point(field_get:envelope.uncompressed_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::req*>(
      &::_req_default_instance_);
}
inline ::req* envelope::release_uncompressed_data() {
  // @@protoc_insertion_point(field_release:envelope.uncompressed_data)
  _has_bits_[0] &= ~0x00000001u;
  ::req* temp = uncompressed_data_;
  uncompressed_data_ = nullptr;
  return temp;
}
inline ::req* envelope::mutable_uncompressed_data() {
  _has_bits_[0] |= 0x00000001u;
  if (uncompressed_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::req>(GetArenaNoVirtual());
    uncompressed_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:envelope.uncompressed_data)
  return uncompressed_data_;
}
inline void envelope::set_allocated_uncompressed_data(::req* uncompressed_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete uncompressed_data_;
  }
  if (uncompressed_data) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      uncompressed_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, uncompressed_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  uncompressed_data_ = uncompressed_data;
  // @@protoc_insertion_point(field_set_allocated:envelope.uncompressed_data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::req_type_enum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::req_type_enum>() {
  return ::req_type_enum_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_proto_2ferl_5fplayground_2eproto
